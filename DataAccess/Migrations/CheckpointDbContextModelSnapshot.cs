// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CheckpointDbContext))]
    partial class CheckpointDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("batterycapacity");

                    b.Property<int>("Brand")
                        .HasColumnType("integer")
                        .HasColumnName("brand");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_scooters");

                    b.ToTable("scooters", null, t =>
                        {
                            t.HasCheckConstraint("CK_Scooter_BatteryCapacity", "\"batterycapacity\" BETWEEN 1 AND 100");
                        });
                });

            modelBuilder.Entity("Domain.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<decimal>("Distance")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("distance");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<int>("ScooterId")
                        .HasColumnType("integer")
                        .HasColumnName("scooterid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.HasIndex("ScooterId")
                        .HasDatabaseName("ix_trips_scooterid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trips_userid");

                    b.ToTable("trips", null, t =>
                        {
                            t.HasCheckConstraint("CK_Trip_CostNonNegative", "\"cost\" >= 0");

                            t.HasCheckConstraint("CK_Trip_DistanceNonNegative", "\"distance\" >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("integer")
                        .HasColumnName("phonenumber");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phonenumber");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Trip", b =>
                {
                    b.HasOne("Domain.Models.Scooter", "Scooter")
                        .WithMany("Trips")
                        .HasForeignKey("ScooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_scooters_scooterid");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_users_userid");

                    b.Navigation("Scooter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Scooter", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
